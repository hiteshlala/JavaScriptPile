{"name":"Javascriptpile","tagline":"Bunch of projects I worked on","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n\r\n\r\n#JavaScript Pile\r\nA collection of functions written for practice. I tried to separate some functions which stand alone as a project and could potentially be useful at a later time to make them easier to find.\r\n\r\n###play.js\r\na file that has a hodge podge of functions some recursion etc this one gets edited regularly. I keep adding functions\r\n\r\n###permutations.js\r\na basic function to permute using recursion. Did this some time ago and definitely needs revisiting\r\n\r\n###phoneNumToText.js\r\nwas trying to get a list of text strings from a phone number. Works but you het a huge list so beware\r\n\r\n###recursiveTrees.js\r\nrecursive function to create a branching tree, can adjust the number of iterations and length of the arms on initial tree\r\n\r\n###sierpinski.js\r\nrecursively generate the Sierpinski triangles. Can adjust the number of iterations.\r\n\r\n###convexHull.js\r\ncalculates the smallest boundary of a group of points in a plane. I implemented Grahams solution orignally published in the 1970's but I found on Wikipedia\r\n\r\n###towersOfHanoi.js\r\nrecursively solves the Towers of Hanoi porblem. Have a funcion that returns a table of moves and a function that prints the moves directly on the screen.\r\n\r\n###flattenObject.js\r\na function that takes a hierarchical map of properties and converts it to a single, flattened map, with the different levels separated by a forward slash ('/').\r\n\r\n###romanNumeral.js\r\nRoman Numeral Converter two functions to convert a given number into a roman numeral. One is iterative the other recursive. Iterative makes more intuitive sense to me.\r\n\r\n###deepEquals.js\r\na function that, given two objects, returns whether or not the two are deeply equivalent--meaning the structure of the two objects is the same, and so is the structure of each of their corresponding descendants.\r\n\r\n###anagrams.js\r\na function that given a string returns all anagrams. Basically all permutaions of the string are retruned in an array.\r\n\r\n###binarySearch.js\r\ngiven an ordered list and an item return the index of the item in that list. Do this recursively.\r\n\r\n###isPrime.js\r\na function that determines if a number is prime. 1 is treated as not prime.\r\n\r\n###smallestCommonMultiple.js\r\nFind the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters. The range will be an array of two numbers that will not necessarily be in numerical order.\r\n\r\n###tagCount.js\r\na function that recursively checks all tags of the document and counts the number of times a given tag appears. The tag and DOM to be checked are inputs.\r\n\r\n###recursiveMultiply.js\r\na recursive function to multiply two positive integers without using the * operator. You can use addition, subtraction, and bit shifting, but you should minimize the number of those operations.\r\n\r\n###makeHtmlPage.sh\r\na shell script to create an html page with a script tag for testing .js files.\r\n\r\n###fibonacci.js\r\nthree functions to calculate fibonacci numbers. One iterative and two recursive (one of the recursive ones has caching). fibonacci sequence starts: 1, 1, 2, 3, 5,.... so 0th element is 1, 1st element is 1, 2nd is 2, etc found using formula f(n) = f(n-1) + f(n-2).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}